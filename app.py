from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from telebot import types
import telebot

import config
from modules.scripts import *
from modules.commands import *

VERSION = "1.0.1.1"


bot = telebot.TeleBot(config.API)  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞

# –ö–õ–ê–í–ò–ê–¢–£–†–´
btn_return_main = InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data='return:main')
btn_skip = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å >", callback_data='skip')
keyboard_mood_settings = InlineKeyboardMarkup(row_width = 2)
keyboard_mood_settings.add(btn_return_main, btn_skip)

keyboard_profile = InlineKeyboardMarkup(row_width=2)
keyboard_profile.add(btn_return_main)



def send_message(message, mood, message_id):
    add_mood(message.chat.id, mood, message.text)
    bot.delete_message(message.chat.id, message.message_id)
    keyboard_main = create_keyboard_main(message.chat.id)
    bot.edit_message_text(chat_id=message.chat.id, message_id=message_id, text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", reply_markup=keyboard_main)


def create_keyboard_main(user_id):
    btn_happy = types.InlineKeyboardButton("üòä", callback_data='mood:–°—á–∞—Å—Ç—å–µ')
    btn_sad = types.InlineKeyboardButton("üò¢", callback_data='mood:–ì—Ä—É—Å—Ç—å')
    btn_profile = InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    keyboard_main = InlineKeyboardMarkup(row_width=2)
    keyboard_main.add(btn_happy, btn_sad)
    user = SQL_request("SELECT * FROM users WHERE id = ?", (int(user_id),))
    if user[2] != None:
        frend = SQL_request("SELECT * FROM users WHERE id = ?", (int(user[2]),))
        frend_name = frend[4]
        if frend[4] == None: frend_name = '–î—Ä—É–≥'
        btn_frend = InlineKeyboardButton(text=frend_name, callback_data='frend')
    else:
        btn_frend = InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", switch_inline_query="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
    keyboard_main.add(btn_frend, btn_profile)
    return keyboard_main



commands = [  # –ö–û–ú–ê–ù–î–´
telebot.types.BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
]


# –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['start'])  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
def start(message):
    menu_id = registration(message)
    keyboard_main = create_keyboard_main(message.chat.id)
    text = "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
    if message.chat.id == config.ADMIN:
        text = f"{VERSION}\n\n{text}"
    bot.send_message(message.chat.id, text, reply_markup=keyboard_main)
    bot.delete_message(message.chat.id, message.id)
    if menu_id:
        bot.delete_message(message.chat.id, menu_id)



@bot.inline_handler(lambda query: query.query == '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' or not query.query)
def default_query(inline_query):
    user_id = inline_query.from_user.id
    user = SQL_request("SELECT * FROM users WHERE id = ?", (int(user_id),))
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π
    if not inline_query.query:
        date, time = now_time()
        text = get_only_mood(user[0], date)
        text = text.replace("–°—á–∞—Å—Ç—å–µ", "üòä")
        text = text.replace("–ì—Ä—É—Å—Ç—å", "üò¢")
        text = format_emojis(text)
        bot.answer_inline_query(
            inline_query.id, 
            [
                types.InlineQueryResultArticle(
                    id='my_mood', 
                    title='–ú–æ—è –±–∞–Ω–∫–∞',
                    thumbnail_url="https://falbue.github.io/classroom-code/icons/registr.png",
                    description='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –±–∞–Ω–∫—É',
                    input_message_content=types.InputTextMessageContent(
                        message_text=text
                    ),
                )
            ]
        )
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–≤–µ–Ω "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
    else:
        bot.answer_inline_query(
            inline_query.id, 
            [
                types.InlineQueryResultArticle(
                    id='invite', 
                    title='–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ',
                    thumbnail_url="https://falbue.github.io/classroom-code/icons/registr.png",
                    description='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ',
                    input_message_content=types.InputTextMessageContent(
                        message_text="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
                    ),
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            text='–ü–µ—Ä–µ–π—Ç–∏', 
                            callback_data=f"invite:{user[0]}"
                        )
                    )
                )
            ]
        )




# –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ó–û–í–û–í
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):  # —Ä–∞–±–æ—Ç–∞ —Å –≤—ã–∑–æ–≤–∞–º–∏ inline –∫–Ω–æ–ø–æ–∫
    if (call.data).split(":")[0] == 'invite':
        user_id = call.from_user.id
        if str(user_id) != str((call.data).split(":")[1]):
            user = SQL_request("SELECT * FROM users WHERE id = ?", (int(user_id),))
            if user ==  None or user == "":
                date, time  = now_time()
                SQL_request("""INSERT INTO users (id, message, time_registration)VALUES (?, ?, ?)""", (user_id, 1, date)) 
            SQL_request("UPDATE users SET frend = ? WHERE id = ?", (user_id, (call.data).split(":")[1]))
            SQL_request("UPDATE users SET frend = ? WHERE id = ?", ((call.data).split(":")[1], user_id))
            bot.edit_message_text(chat_id=None, inline_message_id=call.inline_message_id, text="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!", reply_markup=None)
        else:
            pass
    else:
        user_id = call.message.chat.id
        message_id = call.message.message_id
        user = SQL_request("SELECT * FROM users WHERE id = ?", (int(user_id),))
        print(call.data)

    if call.data == 'profile':
        date, time = now_time()
        text = get_only_mood(user_id, date)
        text = text.replace("–°—á–∞—Å—Ç—å–µ", "üòä")
        text = text.replace("–ì—Ä—É—Å—Ç—å", "üò¢")
        text = format_emojis(text)
        bot.edit_message_text(chat_id=user_id, message_id=message_id, text=text, reply_markup=keyboard_profile)

    if (call.data).split(":")[0] == 'mood':
        mood = (call.data).split(":")[1]
        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {mood}\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ç–∞–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        bot.edit_message_text(chat_id=user_id, message_id=message_id, text=text, reply_markup=keyboard_mood_settings)
        bot.register_next_step_handler(call.message, send_message, mood, message_id)

    if call.data == 'skip':
        mood = (call.message.text).split(": ")[1].split("\n")[0]
        add_mood(user_id, mood, "")
        keyboard_main = create_keyboard_main(user_id)
        text = "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
        if user_id == config.ADMIN:
            text = f"{VERSION}\n\n{text}"
        bot.edit_message_text(chat_id=user_id, message_id=message_id, text=text, reply_markup=keyboard_main)

    if call.data == 'frend':
        date, time = now_time()
        text = get_only_mood(user[2], date)
        text = text.replace("–°—á–∞—Å—Ç—å–µ", "üòä")
        text = text.replace("–ì—Ä—É—Å—Ç—å", "üò¢")
        text = format_emojis(text)
        bot.edit_message_text(chat_id=user_id, message_id=message_id, text=text, reply_markup=keyboard_profile)


    if (call.data).split(":")[0] == 'return':
        bot.clear_step_handler_by_chat_id(chat_id=user_id)
        if (call.data).split(":")[1] == 'main':
            keyboard_main = create_keyboard_main(user_id)
            text = "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
            if user_id == config.ADMIN:
                text = f"{VERSION}\n\n{text}"
            bot.edit_message_text(chat_id=user_id, message_id=message_id, text=text, reply_markup=keyboard_main)
        



print(f"–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)